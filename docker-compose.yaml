version: '2.1'

services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - broker-kafka

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_NUM_PARTITIONS: 4
    depends_on:
      - zoo1
    networks:
      - broker-kafka

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_NUM_PARTITIONS: 4
    depends_on:
      - zoo1
    networks:
      - broker-kafka

  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_NUM_PARTITIONS: 4
    depends_on:
      - zoo1
    networks:
      - broker-kafka

  kafdrop:
     image: obsidiandynamics/kafdrop:3.27.0
     networks:
       - broker-kafka
     depends_on:
       - zoo1
     ports:
       - 19000:9000
     environment:
       KAFKA_BROKERCONNECT: kafka1:29092,kafka2:29093,kafka3:29094

#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    container_name: kafka-ui
#    ports:
#      - "8080:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29093,kafka3:29094
#      KAFKA_CLUSTERS_0_ZOOKEEPER: zoo1:2181
#    networks:
#      - broker-kafka

  spark-master:
    image: docker.io/bitnami/spark:3.3
    container_name: ktech_spark
    environment:
      - SPARK_MODE=master
      - SPARK_DAEMON_JAVA_OPTS=-Dspark.ui.port=8085
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "8080:8080"  # Spark Web UI
      - "7077:7077"
    depends_on:
      - kafka1  # Ensure Kafka is up before starting Spark
      - kafka2
      - kafka3
    volumes:
      - ./:/app/ # Mount your Spark Streaming app
    restart: unless-stopped
    networks:
      - broker-kafka

  spark-submit:
    image: docker.io/bitnami/spark:3.3
    container_name: ktech_spark_submit
    environment:
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_MEASUREMENT: ${INFLUXDB_MEASUREMENT}
      INFLUX_ORG: ${INFLUX_ORG}
      INFLUX_TOKEN: ${INFLUX_TOKEN}
    volumes:
      - ./:/app/
      - ./packages/postgresql-42.5.4.jar:/opt/bitnami/spark/jars/postgresql-42.5.4.jar
    command: [ "sh", "-c", "pip install -r /app/requirements.txt && spark-submit --jars /opt/bitnami/spark/jars/postgresql-42.5.4.jar --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.3 --master spark://spark-master:7077 /app/consumer/consumer.py" ]
    depends_on:
      - spark-master
#    restart: unless-stopped
    networks:
      - broker-kafka

#  spark-submit2:
#    image: docker.io/bitnami/spark:3.3
#    container_name: ktech_spark_submit2
#    volumes:
#      - ./:/app/
#    command: [ "sh", "-c", "pip install -r /app/requirements.txt && spark-submit2 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.3 --master spark://spark-master:7077 /app/consumer/batch_processing.py" ]
#    depends_on:
#      - spark-master
#    networks:
#      - broker-kafka

  spark-worker:
    image: docker.io/bitnami/spark:3.3
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_USER: spark
    ports:
      - "8081:8081"
    networks:
      - broker-kafka

#  spark-worker2:
#    image: docker.io/bitnami/spark:3.3
#    environment:
#      SPARK_MODE: worker
#      SPARK_MASTER_URL: spark://spark-master:7077
#      SPARK_WORKER_MEMORY: 1G
#      SPARK_WORKER_CORES: 1
#      SPARK_RPC_AUTHENTICATION_ENABLED: no
#      SPARK_RPC_ENCRYPTION_ENABLED: no
#      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
#      SPARK_SSL_ENABLED: no
#      SPARK_USER: spark
#    ports:
#      - "8082:8082"
#    networks:
#      - broker-kafka

  namenode:
    image: apache/hadoop:3
    hostname: namenode
    command: [ "hdfs", "namenode" ]
    depends_on:
      - resourcemanager
      - nodemanager
    ports:
      - 9870:9870
    env_file:
      - ./config-hadoop
    environment:
      ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    networks:
      - broker-kafka
    volumes:
      - hadoop:/home/
    restart: on-failure

  datanode:
    image: apache/hadoop:3
    command: [ "hdfs", "datanode" ]
    depends_on:
      - namenode
    env_file:
      - ./config-hadoop
    networks:
      - broker-kafka
    volumes:
      - hadoop:/home/
    restart: on-failure

  resourcemanager:
    image: apache/hadoop:3
    hostname: resourcemanager
    command: [ "yarn", "resourcemanager" ]
    ports:
      - 8088:8088
    env_file:
      - ./config-hadoop
    volumes:
      - ./test.sh:/opt/test.sh
    networks:
      - broker-kafka
    restart: on-failure

  nodemanager:
    image: apache/hadoop:3
    hostname: nodemanager
    command: [ "yarn", "nodemanager" ]
    env_file:
      - ./config-hadoop
    networks:
      - broker-kafka
    volumes:
      - hadoop:/home/
    restart: on-failure

  influxdb:
    image: bitnami/influxdb:2.5.1
    container_name: influxdb
    restart: always
    ports:
      - 8086:8086
    volumes:
      - .\influxdb:/bitnami/influxdb
    environment:
      INFLUXDB_ADMIN_USER_PASSWORD: ${INFLUXDB_ADMIN_USER_PASSWORD}
      INFLUXDB_USER: ${INFLUXDB_USER}
      INFLUXDB_USER_PASSWORD: ${INFLUXDB_USER_PASSWORD}
      INFLUXDB_ADMIN_USER_TOKEN: ${INFLUX_TOKEN}

      INFLUXDB_DB: ${INFLUXDB_DB}   # the database to be created on first startup
      INFLUXDB_HTTP_AUTH_ENABLED: true  # enable http auth
      INFLUX_TOKEN: ${INFLUX_TOKEN}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUX_ORG: ${INFLUX_ORG}
      INFLUXDB_MEASUREMENT: ${INFLUXDB_MEASUREMENT}
    networks:
      - broker-kafka

  grafana:
    image: grafana/grafana-oss:8.4.3
    volumes:
      - grafana-storage:/var/lib/grafana:rw
    depends_on:
      - influxdb
    ports:
      - 3000:3000
    networks:
      - broker-kafka

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongodb-data:/data/db
    networks:
      - broker-kafka

volumes:
  grafana-storage:
  hadoop:
  mongodb-data:

networks:
  broker-kafka:
    driver: bridge